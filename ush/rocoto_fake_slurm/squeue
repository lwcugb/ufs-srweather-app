#!/bin/bash

# Emulates slurm's squeue
if [[ "$1" = "--jobs="* ]]; then
  PIDS="${1:7}"
  PIDS="${PIDS//,/' '}"
elif [[ -f .job_database ]]; then
  PIDS=$(cat .job_database | grep submitted | sort -u -k1,1 |  awk '{print $3}')
fi

# Output info the way rocoto calls squeue
FMT="%-40s%-40s%-10s%-20s%-30s%-30s%-30s%-30s%-10s%-30s%-200s\n"
printf "$FMT" JOBID USER CPUS PARTITION SUBMIT_TIME START_TIME END_TIME PRIORITY EXIT_CODE STATE NAME

for pid in ${PIDS}; do

   t_sub="N/A"
   t_start=$t_sub
   t_end=$t_sub
   name=$pid
   user=${USER:-user}
   exitc=0
   state="UNKNOWN"

   v=$(cat .job_database | grep "pid $pid submitted" | awk '{print $1" "$5}')
   if [ ! -z "$v" ]; then
      state="PENDING"
      read name t_sub <<< "$v"
      v=$(cat .job_database | grep "pid $pid started" | awk '{print $5" "$7}')
      if [ ! -z "$v" ]; then
         state="RUNNING"
         read t_start t_end<<< "$v"
      fi
      v=$(cat .job_database | grep "pid $pid ended" | awk '{print $5" "$7}')
      if [ ! -z "$v" ]; then
         state="COMPLETED"
         read t_end exitc <<< "$v"
      fi
   fi

   printf "$FMT" $pid $user 1 linux $t_sub $t_start $t_end 0.1 $exitc $state $name
done
